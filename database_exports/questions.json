[
  {
    "_id": "68f5ad395520ff540cdd650e",
    "type": "mcq",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": "68f5ad395520ff540cdd650c",
    "prompt": "What is the correct way to declare a variable in Python?",
    "choices": [
      "var x = 5",
      "x = 5",
      "int x = 5",
      "x := 5"
    ],
    "correct_choice": 1,
    "difficulty": "easy",
    "tags": [
      "variables",
      "syntax"
    ],
    "created_at": "2025-10-20T03:32:09.222000"
  },
  {
    "_id": "68f5ad395520ff540cdd650f",
    "type": "mcq",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": "68f5ad395520ff540cdd650c",
    "prompt": "Which of the following is NOT a Python data type?",
    "choices": [
      "int",
      "string",
      "char",
      "float"
    ],
    "correct_choice": 2,
    "difficulty": "easy",
    "tags": [
      "data-types"
    ],
    "created_at": "2025-10-20T03:32:09.222000"
  },
  {
    "_id": "68f5ad395520ff540cdd6510",
    "type": "mcq",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": "68f5ad395520ff540cdd650c",
    "prompt": "What does the 'len()' function do in Python?",
    "choices": [
      "Returns the length of a string or list",
      "Returns the largest number",
      "Returns the smallest number",
      "Returns the sum of numbers"
    ],
    "correct_choice": 0,
    "difficulty": "easy",
    "tags": [
      "functions",
      "built-in"
    ],
    "created_at": "2025-10-20T03:32:09.222000"
  },
  {
    "_id": "68f5ad395520ff540cdd6511",
    "type": "mcq",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": "68f5ad395520ff540cdd650c",
    "prompt": "Which keyword is used to define a function in Python?",
    "choices": [
      "function",
      "def",
      "define",
      "func"
    ],
    "correct_choice": 1,
    "difficulty": "medium",
    "tags": [
      "functions",
      "syntax"
    ],
    "created_at": "2025-10-20T03:32:09.222000"
  },
  {
    "_id": "68f5ad395520ff540cdd6512",
    "type": "mcq",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": "68f5ad395520ff540cdd650c",
    "prompt": "What is the output of: print(3 * 2 + 1)?",
    "choices": [
      "7",
      "9",
      "6",
      "5"
    ],
    "correct_choice": 0,
    "difficulty": "easy",
    "tags": [
      "operators",
      "arithmetic"
    ],
    "created_at": "2025-10-20T03:32:09.222000"
  },
  {
    "_id": "68f5ad395520ff540cdd6513",
    "type": "code",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": "68f5ad395520ff540cdd650c",
    "prompt": "Implement function solve(n) that prints the factorial of n. Read integer n from input and print result without extra text.",
    "code_starter": "def solve(n):\n    # your code here\n    return 1\n\nif __name__ == '__main__':\n    import sys\n    data = sys.stdin.read().strip()\n    n = int(data) if data else 0\n    print(solve(n))\n",
    "test_cases": [
      {
        "input": "0\n",
        "expected_output": "1",
        "is_hidden": false
      },
      {
        "input": "3\n",
        "expected_output": "6",
        "is_hidden": true
      },
      {
        "input": "5\n",
        "expected_output": "120",
        "is_hidden": true
      }
    ],
    "difficulty": "easy",
    "tags": [
      "functions",
      "loops"
    ],
    "created_at": "2025-10-20T03:32:09.222000",
    "is_practice_problem": true,
    "updated_at": "2025-10-20T13:54:18.539000"
  },
  {
    "_id": "68f5ad395520ff540cdd6514",
    "type": "mcq",
    "course_id": "68f5ad395520ff540cdd650b",
    "quiz_id": "68f5ad395520ff540cdd650d",
    "prompt": "What is the time complexity of accessing an element in an array?",
    "choices": [
      "O(1)",
      "O(n)",
      "O(log n)",
      "O(nÂ²)"
    ],
    "correct_choice": 0,
    "difficulty": "medium",
    "tags": [
      "arrays",
      "time-complexity"
    ],
    "created_at": "2025-10-20T03:32:09.244000"
  },
  {
    "_id": "68f5ad395520ff540cdd6515",
    "type": "mcq",
    "course_id": "68f5ad395520ff540cdd650b",
    "quiz_id": "68f5ad395520ff540cdd650d",
    "prompt": "Which data structure follows LIFO (Last In, First Out) principle?",
    "choices": [
      "Queue",
      "Stack",
      "Array",
      "Linked List"
    ],
    "correct_choice": 1,
    "difficulty": "easy",
    "tags": [
      "stack",
      "data-structures"
    ],
    "created_at": "2025-10-20T03:32:09.244000"
  },
  {
    "_id": "68f5ad395520ff540cdd6516",
    "type": "mcq",
    "course_id": "68f5ad395520ff540cdd650b",
    "quiz_id": "68f5ad395520ff540cdd650d",
    "prompt": "What is the main advantage of a linked list over an array?",
    "choices": [
      "Faster access time",
      "Dynamic size",
      "Less memory usage",
      "Better cache performance"
    ],
    "correct_choice": 1,
    "difficulty": "medium",
    "tags": [
      "linked-list",
      "arrays",
      "advantages"
    ],
    "created_at": "2025-10-20T03:32:09.244000"
  },
  {
    "_id": "68f5b90b38b1bbde4a471e13",
    "type": "code",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": null,
    "prompt": "Two Sum - Find two numbers that add up to a target",
    "code_starter": "def two_sum(nums, target):\n    # Your code here\n    pass\n\n# Test your function\nif __name__ == '__main__':\n    import sys\n    data = sys.stdin.read().strip()\n    lines = data.split('\\n')\n    nums = list(map(int, lines[0].split()))\n    target = int(lines[1])\n    result = two_sum(nums, target)\n    print(' '.join(map(str, result)))",
    "test_cases": [
      {
        "input": "2 7 11 15\n9",
        "expected_output": "0 1",
        "is_hidden": false
      },
      {
        "input": "3 2 4\n6",
        "expected_output": "1 2",
        "is_hidden": false
      },
      {
        "input": "3 3\n6",
        "expected_output": "0 1",
        "is_hidden": true
      }
    ],
    "difficulty": "easy",
    "tags": [
      "arrays",
      "hash-table"
    ],
    "xp_reward": 15,
    "is_practice_problem": true,
    "explanation": "Use a hash map to store numbers and their indices. For each number, check if target - number exists in the map.",
    "created_at": "2025-10-20T04:22:35.393000",
    "updated_at": "2025-10-21T16:25:06.636000"
  },
  {
    "_id": "68f5b90b38b1bbde4a471e14",
    "type": "code",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": null,
    "prompt": "Reverse String - Reverse a string in-place",
    "code_starter": "def reverse_string(s):\n    # Your code here\n    pass\n\n# Test your function\nif __name__ == '__main__':\n    import sys\n    s = sys.stdin.read().strip()\n    reverse_string(s)\n    print(s)",
    "test_cases": [
      {
        "input": "hello",
        "expected_output": "olleh",
        "is_hidden": false
      },
      {
        "input": "abcd",
        "expected_output": "dcba",
        "is_hidden": false
      },
      {
        "input": "a",
        "expected_output": "a",
        "is_hidden": true
      }
    ],
    "difficulty": "easy",
    "tags": [
      "two-pointers",
      "string"
    ],
    "xp_reward": 10,
    "is_practice_problem": true,
    "explanation": "Use two pointers, one at the start and one at the end. Swap characters and move pointers towards the center.",
    "created_at": "2025-10-20T04:22:35.393000"
  },
  {
    "_id": "68f5b90b38b1bbde4a471e15",
    "type": "code",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": null,
    "prompt": "Valid Parentheses - Check if parentheses are balanced",
    "code_starter": "def is_valid(s):\n    # Your code here\n    pass\n\n# Test your function\nif __name__ == '__main__':\n    import sys\n    s = sys.stdin.read().strip()\n    result = is_valid(s)\n    print('true' if result else 'false')",
    "test_cases": [
      {
        "input": "()",
        "expected_output": "true",
        "is_hidden": false
      },
      {
        "input": "()[]{}",
        "expected_output": "true",
        "is_hidden": false
      },
      {
        "input": "(]",
        "expected_output": "false",
        "is_hidden": false
      },
      {
        "input": "([)]",
        "expected_output": "false",
        "is_hidden": true
      }
    ],
    "difficulty": "easy",
    "tags": [
      "stack",
      "string"
    ],
    "xp_reward": 12,
    "is_practice_problem": true,
    "explanation": "Use a stack to keep track of opening brackets. When you encounter a closing bracket, check if it matches the most recent opening bracket.",
    "created_at": "2025-10-20T04:22:35.393000"
  },
  {
    "_id": "68f5b90b38b1bbde4a471e16",
    "type": "code",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": null,
    "prompt": "Maximum Subarray - Find the contiguous subarray with maximum sum",
    "code_starter": "def max_subarray(nums):\n    # Your code here\n    pass\n\n# Test your function\nif __name__ == '__main__':\n    import sys\n    data = sys.stdin.read().strip()\n    nums = list(map(int, data.split()))\n    result = max_subarray(nums)\n    print(result)",
    "test_cases": [
      {
        "input": "-2 1 -3 4 -1 2 1 -5 4",
        "expected_output": "6",
        "is_hidden": false
      },
      {
        "input": "1",
        "expected_output": "1",
        "is_hidden": false
      },
      {
        "input": "5 4 -1 7 8",
        "expected_output": "23",
        "is_hidden": true
      }
    ],
    "difficulty": "medium",
    "tags": [
      "array",
      "divide-and-conquer",
      "dynamic-programming"
    ],
    "xp_reward": 20,
    "is_practice_problem": true,
    "explanation": "Use Kadane's algorithm. Keep track of the maximum sum ending at each position and the global maximum sum.",
    "created_at": "2025-10-20T04:22:35.393000",
    "updated_at": "2025-10-23T03:22:46.381000"
  },
  {
    "_id": "68f5b90b38b1bbde4a471e17",
    "type": "code",
    "course_id": "68f5ad395520ff540cdd650a",
    "quiz_id": null,
    "prompt": "Binary Tree Inorder Traversal - Traverse a binary tree in-order",
    "code_starter": "def inorder_traversal(root):\n    # Your code here\n    pass\n\n# Test your function\nif __name__ == '__main__':\n    import sys\n    # This is a simplified test - in practice you'd build the tree from input\n    data = sys.stdin.read().strip()\n    # For demo purposes, assume input is a list of values\n    values = data.split() if data else []\n    result = inorder_traversal(values)\n    print(' '.join(map(str, result)))",
    "test_cases": [
      {
        "input": "1 null 2 3",
        "expected_output": "1 3 2",
        "is_hidden": false
      },
      {
        "input": "",
        "expected_output": "",
        "is_hidden": false
      },
      {
        "input": "1",
        "expected_output": "1",
        "is_hidden": true
      }
    ],
    "difficulty": "easy",
    "tags": [
      "stack",
      "tree",
      "depth-first-search"
    ],
    "xp_reward": 15,
    "is_practice_problem": true,
    "explanation": "In-order traversal: left subtree, root, right subtree. Use recursion or a stack to implement.",
    "created_at": "2025-10-20T04:22:35.393000"
  },
  {
    "_id": "68f63af0bf8d245ea4988fd1",
    "type": "code",
    "prompt": "python",
    "code_starter": "",
    "test_cases": [
      {
        "input": "1",
        "expected_output": "1",
        "is_hidden": false
      },
      {
        "input": "1",
        "expected_output": "1",
        "is_hidden": false
      }
    ],
    "difficulty": "easy",
    "tags": [
      "easy"
    ],
    "xp_reward": 10,
    "explanation": "",
    "is_practice_problem": true,
    "created_at": "2025-10-20T13:36:48.793000",
    "updated_at": "2025-10-20T14:45:27.403000"
  },
  {
    "_id": "68f642980c05f9693bce5f47",
    "type": "code",
    "course_id": null,
    "quiz_id": null,
    "prompt": "Sum of Two Numbers - Given two integers, return their sum",
    "code_starter": "def sum_two_numbers(a, b):\n    # Your code here\n    return a + b\n\n# Test your function\nif __name__ == \"__main__\":\n    import sys\n    line = sys.stdin.read().strip()\n    if line:\n        parts = line.split()\n        if len(parts) >= 2:\n            a, b = int(parts[0]), int(parts[1])\n            result = sum_two_numbers(a, b)\n            print(result)",
    "difficulty": "easy",
    "tags": [
      "math",
      "basic"
    ],
    "xp_reward": 10,
    "is_practice_problem": true,
    "explanation": "Simply add the two numbers together and return the result.",
    "test_cases": [
      {
        "input": "5 3",
        "expected_output": "8",
        "is_hidden": false
      },
      {
        "input": "-2 7",
        "expected_output": "5",
        "is_hidden": false
      },
      {
        "input": "0 0",
        "expected_output": "0",
        "is_hidden": true
      }
    ],
    "created_at": "2025-10-20T14:09:28.522000",
    "updated_at": "2025-10-20T15:11:24.807000"
  }
]